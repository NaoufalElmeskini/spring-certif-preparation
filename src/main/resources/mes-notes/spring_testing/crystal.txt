Testing in Spring == Injection de dependance dans l'environnement de test



mes question:

  - quelles annotations principales pour tester mes composants
    - Junit vs TestContext vs Spring ?
  - comment charger uniquement les composants necessaires ?
    - declarer une configuration propre au test ?
  - TU vs test d'integration ?
  - qu'est ce que Spring Boot apporte au Test de plus que Spring ?

=> concepts :
  - TestCOntext, JUnit, Mockito
##############

JUnit, test unitaire :
  le test unitarie a pour but de tester un composant sans regarder ses 
  interactions avec le reste du systeme.
  
  pourquoi Spring ?
  entre autre, Spring nous évite de gerer l'initialisation et instantiation de 
  notre composant testé
  
  ? mon application = service MonService qui depend d'une classe MonRepo.
    nous voulons tester MonService.concatener() [qui concatene 2 element 
  retournés.
    comment faire sans spring ?
    comment faire avec spring ?

  par monRepo]
  ? probleme... comment eviter de charger tous le contexte spring ?
  >

  - configuration spring :
    1. @SpringJUnitConfiguration(maTestConfig )
    2. @SpringJUnitConfiguration() + et declarer
    une inner class @configuration dans la test class

concept :
  - (JUnit) Extension (@ExtendWith, SpringExtension...)
  - (spring) TestContext
annotations :
  junit :
    (JU) @ExtendWith
    (SP) @ContexteConfiguration
    (SP) @SpringJUnitConfig 
      (= extendWith + contexteConfiguration)

